m
clc
clear
x <- list(foo = 1:4, bar = 0.6)
x
x[1]
x$bar
x[["bar"]]
x[["foo"]]
x["bar"]
x <- list(foo = 1:4, bar = 0.6, baz = "hello")
x[c(1,2)]
y -> data.frame(a = 1, b = "a")
y <- data.frame(a = 1, b = "a")
y
dput(y)
dput(y) structure(list(a = 1, b = structure))
install.packages("swirl")
library("swirl")
swirl()
x <- 4L
x
as.integer(x)
x <- list(2, "a", "b", TRUE)
x[[2]]
x <- 1:4
y <- 2
x + y
x <- c(17, 14, 4, 5, 13, 12, 10)
x[x > 10] <- 4
x
data <- read.table("hw1_data.csv")
data <- read.table("/Users/HowardYang/Desktop/hw1_data.csv")
data <- read.csv("/Users/HowardYang/Desktop/hw1_data.csv")
data
is.na(data.Ozone)
is.na(data(Ozone))
is.na(data(2,))
is.na(data(Ozone,))
is.na(data(,Ozone))
is.na(data(,2))
data(, 2)
data[(], 2]
data[, 2]
is.na(data[, 2])
sum(is.na(data[, 2]))
sum(is.na(data[, 1]))
mean(is.na(data[, 1]))
data[which(is.na(data[,1])),]
na.exclude(is.na(data[,1]))
data
data[complete.cases(data),]
data
aaa <- data[complete.cases(data),]
aaa
mean(is.na(aaa[, 1]))
mean(aaa[, 1])
data[which((data[,1])>31,(data[,4])>90),]
bbb <- data[which(data[,1])>31,]
bbb <- data[which((data[,1])>31),]
bbb
ccc <- bbb[which((bbb[,4])>90),]
ccc
mean(ccc[, 2])
data
bbb <- data[which((data[,5])=6),]
bbb <- data[which((data[,5]) == 6),]
bbb
mean(bbb[, 4])
bbb <- data[which((data[,5]) == 5),]
bbb
max(data[1,])
max(bbb[1,])
x <- 4L
class(x)
x
x <- 4.55L
as.numeric(x)
x <- 4L
as.numeric(x)
as.integer(x)
x <- list(2, "a", "b", TRUE)
x
x <- 1:4
y <- 2:3
x + y
data <- read.csv(/Users/HowardYang/Desktop/hw1_data.csv)
data <- read.csv(Users/HowardYang/Desktop/hw1_data.csv)
data <- read.csv("Users/HowardYang/Desktop/hw1_data.csv")
read.csv("Users/HowardYang/Desktop/hw1_data.csv")
read.csv("hw1_data.csv")
read.csv("file=Users/HowardYang/Desktop/hw1_data.csv")
read.csv(file="Users/HowardYang/Desktop/hw1_data.csv")
read.csv(file="/Users/HowardYang/Desktop/hw1_data.csv")
data <- read.csv(file="/Users/HowardYang/Desktop/hw1_data.csv")
is.na(data[ozone,])
is.na(data[Ozone,])
data[Ozone,]
data[,Ozone]
df[,c("Ozone"]
df[,c("Ozone")]
df[,data("Ozone")]
,data("Ozone")
data("Ozone")
data
sum(is.na(data[,1]))
b<-!is.na(data[,1])
b
b<-na.exclude(data[,1])
b
mean(b)
b<-which(data[,1]>31)
b
b<-data[which(data[,1]>31),]
b
c<-b[which(b[,4]>90),]
c
mean(c[,2])
b<-data[which(data[,5]=6),]
b<-data[which(data[,5]==6),]
b
mean(b[,4])
b<-data[which(data[,5]==5),]
max(b[,1])
b<-data[which(data[,5]==5),]
b
x <- c(1,3, 5)
y <- c(3, 2, 10)
cbind(x, y)
dim(cbind(x, y))
class(cbind(x, y))
x <- list(2, "a", "b", TRUE)
x[[2]]
class(x[[2]])
x <- 1:4
y <- 2:3
x + y
class(x+y)
data <- read.csv(file="/Users/HowardYang/Downloads/hw1_data.csv")
data
sum(is.na(data[,1]))
a <- complete.cases(data[,1])
a
a <- data[complete.cases(data[,1])]
data[,1]
data[complete.cases(data[,1]),1]
mean(data[complete.cases(data[,1]),1])
b <- data[which(data[,1]>31)]
b <- data[which(data[,1])>31]
b <- data[which(data[,1])>31,1]
data[,1]
b <-data[which(data[,1]>31),1]
b
b <-data[which(data[,1]>31)]
b <-data[which(data[,1]>31),]
b
c <-b[which(b[,4]>31),]
c
c <-b[which(b[,4]>90),]
c
meam(c[,2])
mean(c[,2])
b <-data[which(data[,5]==6),]
b
mean(b[,4])
b <-data[which(data[,5]==5),]
b
max(b[,1])
a <- b[complete.cases(b[,1])]
a <- b[complete.cases(b[,1]),]
a
max(a[,1])
x <- c(3, 5, 1, 10, 12, 6)
x[x <= 5] <- 0
x
add2 <- function(x,y){#
	x + y#
}
add2(44,55)
above <- function(x,n){#
	use <- x>n#
	x[use]#
}
x<-1:99
x
above(x,44)
airquality
columnmean <- function(y){#
	nc <- ncol(y)#
	means <- numeric(nc)#
	for(i in 1:nc){#
		means[i] <- mean(y[,i])#
	}#
}
columnmean(airquality)
airquality
columnmean(airquality)
columnmean <- function(y){#
	nc <- ncol(y)#
	means <- numeric(nc)#
	for(i in 1:nc){#
		means[i] <- mean(y[,i])#
	}#
}
columnmean(airquality)
columnmean(airquality)columnmean <- function(y){#
	nc <- ncol(y)#
	means <- numeric(nc)#
	for(i in 1:nc){#
		means[i] <- mean(y[,i])#
	}#
	means#
}
columnmean <- function(y){#
	nc <- ncol(y)#
	means <- numeric(nc)#
	for(i in 1:nc){#
		means[i] <- mean(y[,i])#
	}#
	means#
}
columnmean(airquality)
columnmean <- function(y, removeNZ = TRUE){#
	nc <- ncol(y)#
	means <- numeric(nc)#
	for(i in 1:nc){#
		means[i] <- mean(y[,i], na.rm = removeNA)#
	}#
	means#
}
columnmean(airquality)
columnmean <- function(y, removeNA = TRUE){#
	nc <- ncol(y)#
	means <- numeric(nc)#
	for(i in 1:nc){#
		means[i] <- mean(y[,i], na.rm = removeNA)#
	}#
	means#
}
columnmean(airquality)
cube <- function(x,n){}
cube <- function(x,n){#
	x^3#
}
cube(3)
x <- 1:10#
if(x > 5) {#
        x <- 0#
}
f <- function(x) {#
        g <- function(y) {#
                y + z#
        }#
        z <- 4#
        x + g(x)#
}
z <- 10#
f(3)
x <- 5#
y <- if(x < 3) {#
        NA#
} else {#
        10#
}
y
x
y
x <- 5#
y <- if(x < 3) {#
        NA#
} else {#
        10#
}
y
x <- 5#
y <- if(x < 3) {#
        7#
} else {#
        10#
}
y
directory <- getwd("Users/HowardYang/Dropbox/2014 SAS/Coursera/R_Programming/Programming Assignment2")
list.files(pattern = "csv")
filenames <- list.files(directory)
makeCacheMatrix <- function(x = matrix()) {#
	## check if the Matrix is valid to solve#
	m <- NULL#
	set <- function(y) {#
		x <<- y#
		m <<- NULL#
	}#
	get <- function() x#
        setinverse <- function(solve) m <<- solve#
        getinverse <- function() m#
        list(set = set, get = get,#
             setinverse = setinverse,#
             getinverse = getinverse)#
}
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
m <- x$getinverse()
if(!is.null(m)) {#
                message("getting cached data")#
                return(m)#
        }
m
getwd()
setwd("/Users/HowardYang/Desktop/ProgrammingAssignment2-master")
getwd()
a <- makeVector()
a <- makeVector()
getwd
makeVector
makeVector <- function(x = numeric()) {#
        m <- NULL#
        set <- function(y) {#
                x <<- y#
                m <<- NULL#
        }#
        get <- function() x#
        setmean <- function(mean) m <<- mean#
        getmean <- function() m#
        list(set = set, get = get,setmean = setmean,getmean = getmean)#
}
makeVector
a <- makeVector()
a
class(a)
class(a$set)
a$set(c(1,2,3,4,5,6,7))
a
a$get()
cachemean <- function(x, ...) {#
        m <- x$getmean()#
        if(!is.null(m)) {#
                message("getting cached data")#
                return(m)#
        }#
        data <- x$get()#
        m <- mean(data, ...)#
        x$setmean(m)#
        m#
}
cachemean(a)
makeCacheMatrix <- function(x = matrix()) {#
	## check if the Matrix is valid to solve#
	m <- NULL#
	set <- function(y) {#
		x <<- y#
		m <<- NULL#
	}#
	get <- function() x#
        setinverse <- function(solve) m <<- solve#
        getinverse <- function() m#
        list(set = set, get = get,#
             setcache = setcache,#
             getcache = getcache)#
}
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
makeCacheMatrix <- function(x = matrix()) {#
	## check if the Matrix is valid to solve#
	m <- NULL#
	set <- function(y) {#
		x <<- y#
		m <<- NULL#
	}#
	get <- function() x#
        setcache <- function(solve) m <<- solve#
        getcache <- function() m#
        list(set = set, get = get,#
             setcache = setcache,#
             getcache = getcache)#
}
cacheSolve <- function(x, ...) {#
	## Return a matrix that is the inverse of 'x'#
	    m <- x$getcache()#
        if(!is.null(m)) {#
                message("getting cached data")#
                return(m)#
        }#
        data <- x$get()#
        m <- solve(data, ...)#
        x$setcache(m)#
        m#
	}
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
amatrix$getinverse()
amatrix$getcache()
cacheSolve(amatrix)
amatrix$set(matrix(c(0,5,99,66), nrow=2, ncol=2))
cacheSolve(amatrix)
amatrix$get()
amatrix$getcache()
